fit |>
augment() |>
ACF(.innov) |>
autoplot()
fit |>
select(aicc) |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
library(drf)
source("drfown.R")
source("drfown.R")
setwd("~/GitHub/Forecasting")
source("drfown.R")
n<-length(us_change$Consumption)
Yall<-as.matrix(us_change[,c("Consumption", "Income")])
dCovTS::mADCFplot(Yall)
X<-as.matrix(Yall[1:(n-1),])
Y<-as.matrix(Yall[2:n,])
fit<-drfown(X=X, Y=Y)
B<-100
p<-ncol(Yall)
Ypred<-list() ##list of length H+1, each element contains B replicate of the h prediction step
Ypred[[1]]<-matrix(Yall[n,],nrow=B, ncol=p, byrow = T) ## each element of Ypred contains
colnames(Ypred[[1]])<-colnames(Yall)
##Predict a path
for (h in 2:(H+1)){
# start from last (h-1) prediction in the same "world" b
DRFw <- predict(fit, newdata =Ypred[[h-1]] )$weights
## Draw path
sig<-abs(n^(-1/5)/drf:::medianHeuristic(Y))
Ypred[[h]]<-t(apply(DRFw,1, function(w){
mean<-Y[sample(1:nrow(Y), size=1, replace = T, w),]
return(mvrnorm(n=1, mu = mean, Sigma = sig^2 * diag(p)))
}
))
}
H<-10
fit<-drfown(X=X, Y=Y)
B<-100
p<-ncol(Yall)
Ypred<-list() ##list of length H+1, each element contains B replicate of the h prediction step
Ypred[[1]]<-matrix(Yall[n,],nrow=B, ncol=p, byrow = T) ## each element of Ypred contains
colnames(Ypred[[1]])<-colnames(Yall)
##Predict a path
for (h in 2:(H+1)){
# start from last (h-1) prediction in the same "world" b
DRFw <- predict(fit, newdata =Ypred[[h-1]] )$weights
## Draw path
sig<-abs(n^(-1/5)/drf:::medianHeuristic(Y))
Ypred[[h]]<-t(apply(DRFw,1, function(w){
mean<-Y[sample(1:nrow(Y), size=1, replace = T, w),]
return(mvrnorm(n=1, mu = mean, Sigma = sig^2 * diag(p)))
}
))
}
library(MASS)
fit<-drfown(X=X, Y=Y)
B<-100
p<-ncol(Yall)
Ypred<-list() ##list of length H+1, each element contains B replicate of the h prediction step
Ypred[[1]]<-matrix(Yall[n,],nrow=B, ncol=p, byrow = T) ## each element of Ypred contains
colnames(Ypred[[1]])<-colnames(Yall)
##Predict a path
for (h in 2:(H+1)){
# start from last (h-1) prediction in the same "world" b
DRFw <- predict(fit, newdata =Ypred[[h-1]] )$weights
## Draw path
sig<-abs(n^(-1/5)/drf:::medianHeuristic(Y))
Ypred[[h]]<-t(apply(DRFw,1, function(w){
mean<-Y[sample(1:nrow(Y), size=1, replace = T, w),]
return(mvrnorm(n=1, mu = mean, Sigma = sig^2 * diag(p)))
}
))
}
Ypred
h <- length(Ypred)  # forecast horizon
last_period <- max(us_change$Quarter)  # get last period from your data
last_period
forecast_periods <- seq(last_period, by = "quarter", length.out = h + 1)[-1]
library(fabletools)
library(dplyr)
?seq
seq(last_period, by = "quarter", length.out = h + 1)
timeDate:::seq(last_period, by = "quarter", length.out = h + 1)
timeDate::seq(last_period, by = "quarter", length.out = h + 1)
timeSequence(last_period, by = "quarter", length.out = h + 1)
timeSequence
timeDate
library(timeDate)
timeDate:::seq.timeDate(last_period, by = "quarter", length.out = h + 1)
fit |>
select(aicc) |>
forecast()
FIT
fit
# Load required libraries
library(ggplot2)
library(dCovTS)
library(forecast)
library(dplyr)
library(gridExtra)
library(seasonal)
library(astsa)
library(fpp3)
library(MASS)
# Set seed for reproducibility
set.seed(1)
fit |>
select(aicc) |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
fit <- us_change |>
model(
aicc = VAR(vars(Consumption, Income)),
bic = VAR(vars(Consumption, Income), ic = "bic")
)
glance(fit)
fit |>
select(aicc) |>
forecast()
fit
fit |>
select(aicc) |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
fit |>
augment() |>
ACF(.innov) |>
autoplot()
fit |>
select(aicc) |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
# Load required libraries
library(ggplot2)
library(dCovTS)
library(forecast)
library(dplyr)
library(gridExtra)
library(seasonal)
library(astsa)
library(fpp3)
library(MASS)
# Set seed for reproducibility
set.seed(1)
fit <- us_change |>
model(
aicc = VAR(vars(Consumption, Income)),
bic = VAR(vars(Consumption, Income), ic = "bic")
)
glance(fit)
fit |>
augment() |>
ACF(.innov) |>
autoplot()
fit |>
select(aicc) |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
fit
fit |>
select("aicc") |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
# Load required libraries
library(ggplot2)
library(dCovTS)
library(forecast)
library(dplyr)
library(gridExtra)
library(seasonal)
library(astsa)
library(fpp3)
library(MASS)
# Set seed for reproducibility
set.seed(1)
fit <- us_change |>
model(
aicc = VAR(vars(Consumption, Income)),
bic = VAR(vars(Consumption, Income), ic = "bic")
)
glance(fit)
fit |>
augment() |>
ACF(.innov) |>
autoplot()
fit |>
select(aicc) |>
forecast() |>
autoplot(us_change |> filter(year(Quarter) > 2010))
library(drf)
source("drfown.R")
n<-length(us_change$Consumption)
Yall<-as.matrix(us_change[,c("Consumption", "Income")])
# lag 1
X<-as.matrix(Yall[1:(n-1),])
Y<-as.matrix(Yall[2:n,])
H<-10
fit<-drfown(X=X, Y=Y)
B<-100
p<-ncol(Yall)
Ypred<-list() ##list of length H+1, each element contains B replicate of the h prediction step
Ypred[[1]]<-matrix(Yall[n,],nrow=B, ncol=p, byrow = T) ## each element of Ypred contains
colnames(Ypred[[1]])<-colnames(Yall)
##Predict a path
for (h in 2:(H+1)){
# start from last (h-1) prediction in the same "world" b
DRFw <- predict(fit, newdata =Ypred[[h-1]] )$weights
## Draw path
sig<-abs(n^(-1/5)/drf:::medianHeuristic(Y))
Ypred[[h]]<-t(apply(DRFw,1, function(w){
mean<-Y[sample(1:nrow(Y), size=1, replace = T, w),]
return(mvrnorm(n=1, mu = mean, Sigma = sig^2 * diag(p)))
}
))
}
### Continue here!!!
last_period + months(3 * (1:h))
h <- length(Ypred)  # forecast horizon
last_period <- max(us_change$Quarter)  # get last period from your data
forecast_periods <- seq(last_period, by = "quarter", length.out = h + 1)[-1]
library(lubridate)
last_period + months(3 * (1:h))
last_period
us_change$Quarter
class(us_change$Quarter)
# clean ws
rm(list = ls())
# ----------------------------- pkg
library(fpp3)
library(tsibble)
library(dplyr)
# clean ws
rm(list = ls())
#-------------------------------------------
# TP 1
#-------------------------------------------
# ---------------- ressources
# Forecasting book
## https://otexts.com/fpp3   3d edition
# Work on the following resources and understand how the tsibble function works and what are its
# arguments:
# tsibble objects presented in fpp3  https://otexts.com/fpp3/tsibbles.html
# documentation on tsibble objects   https://tsibble.tidyverts.org/
# tibble objects
## https://r4ds.had.co.nz/tibbles.html
# pipes
##  https://r4ds.hadley.nz/workflow-pipes.html
# ----------- example pipes
# set.seed(123)
# mean(tail(rnorm(10), 5))
# rnorm(10) %>%
#   tail(5) %>%
#   mean()
#
# iris
# iris
# library(dplyr)
# iris %>%  filter(Species == "setosa") %>%
#   filter(Sepal.Length >1.3) %>%
#   select(Sepal.Length, Species)
#
# ----------------------------- pkg
library(fpp3)
library(tsibble)
library(dplyr)
# -------------------------------------- exercise 1
# Load the built-in PBS dataset
data("PBS")
?PBS
# Inspect the first rows
head(PBS)
# Check the time index
index(PBS)
# Check the key variables
key_vars(PBS)
# Find the first and last time points
range(PBS%>%pull(Month))
# Count number of observations per key (e.g., per ATC1)
PBS %>%
count(ATC1_desc)
# ------------------ exercice 2
# Create a tibble with monthly sales for two products
sales_data <- tibble(
month = rep(seq.Date(from = as.Date("2025-01-01"), by = "month", length.out = 6), 2),
product = rep(c("A", "B"), each = 6),
sales = c(10, 12, 15, 14, 18, 20, 8, 9, 12, 11, 13, 15)
)
# Convert the tibble into a tsibble
sales_tsibble <- sales_data %>%
as_tsibble(index = month, key = product)
# Inspect the tsibble
sales_tsibble
str(sales_tsibble)
# Plot sales over time for each product
ggplot(sales_tsibble, aes(x = month, y = sales, color = product)) +
geom_line() +
geom_point() +
labs(title = "Monthly Sales for Products A and B",
x = "Month", y = "Sales")
# -------------------- exercice 3
# # Load necessary packages
# library(tibble)
# library(readr)
#
# # Create fake monthly sales data for two smartphone models
# smartphone_sales <- tibble(
#   month = rep(seq.Date(from = as.Date("2025-01-01"), by = "month", length.out = 6), 2),
#   model = rep(c("AlphaX", "BetaY"), each = 6),
#   units_sold = c(150, 180, 200, 190, 220, 250, 120, 140, 160, 155, 170, 200)
# )
#
# # Save the dataset as a CSV with a meaningful name
# write_csv(smartphone_sales, "TP/data/smartphone_sales.csv")
# Read the CSV file
sales_data <- read_csv("TP/data/smartphone_sales.csv")
library(tsibbledata)
gafa_stock
str(gafa_stock)
?gafa_stock
help(gafa_stock)
gafa_stock
data("gafa_stock")
View(gafa_stock)
str(gafa_stock)
gafa_stock |> autoplot()  # %>% from magrittr
autoplot(gafa_stock)
library(tsibble)
gafa_stock$Date
str(gafa_stock)
gafa_stock |>
mutate(Date = as_date(Date)) |>
as_tsibble(index = Date) -> gafa_stock_new    # specify the index of each observation following the tsbibble
gafa_stock_new |>
filter(Symbol == "AAPL") |>
autoplot(Close) +
labs(title = "Apple stocks", subtitle = "Closing price", y = "USD")
?interval
help(PBS)
data(PBS)
PBS
View(PBS)
PBS |> filter(ATC2 == "A10", ATC1 == "A")  |>
summarise(Total = sum(Cost)) -> A10
autoplot(A10)
# group_by not needed in tsibble for the index
interval(PBS)
help(vic_elec)
vic_elec
data(vic_elec)
vic_elec |> autoplot()
vic_elec |> autoplot(Temperature) +
labs(title = "Temperature, Australia", y = "Temperature, C")
vic_elec |>
slice_head(n=500) |>
autoplot()
vic_elec |>
filter(yearmonth(Time) == yearmonth("2013 June")) |>
autoplot(Demand)
?pelt
help(pelt)
str(pelt)
?pelt
pelt |> autoplot()
pelt |> autoplot(Lynx)
pelt_longer = pelt |>
pivot_longer(cols = Hare:Lynx, names_to ="Animal", values_to ="Trappings")
pelt |>
pivot_longer(cols = Hare:Lynx, names_to ="Animal", values_to ="Trappings") |>
autoplot(Trappings)
plot(x = pelt$Year,  y =pelt$Hare, type="l", col="red")
lines(x = pelt$Year,  y =pelt$Lynx, col="blue4")
gafa_stock_new |>
group_by(Symbol) |>
filter(Close == max(Close))
gafa_stock_new |>
group_by(Symbol) |>
filter(Close == max(Close)) |>
select(Symbol, Date, Close)
# 3. The USgas package contains data on the demand for natural gas in the US.
# (a) Install the USgas package.
# install.packages("USgas")
library(USgas)
help(USgas)
?us_total
data("us_total")
head(us_total)
str(us_total)
us_tsibble <- us_total |>
as_tsibble(
index = year,
key = state
)
us_tsibble
str(us_tsibble)
str(us_total)
unique(us_tsibble$state)
us_tsibble |>
filter(state %in% c("Maine", "Vermont", "New Hampshire", "Massachusetts", "Connecticut", "Rhode Island")) |>
autoplot() #y
us_tsibble |>
filter(state %in% c("Vermont")) |>
autoplot()
us_tsibble |>
filter(state %in% c("Maine", "Vermont", "New Hampshire", "Massachusetts", "Connecticut", "Rhode Island")) |>
summarise(Total = sum(y)) |>
autoplot()
us_tsibble |>
filter(state %in% c("Maine", "Vermont", "New Hampshire", "Massachusetts", "Connecticut", "Rhode Island")) |>
ggplot(aes(year, y)) +
geom_line() +
facet_grid(state ~., scales = "free_y") +
labs(title = "Annual Natural Gas Consumption in New England", y = "Consumption")
?aus_production
data("aus_production")
colnames(aus_production)
aus_production |>
autoplot(Bricks) + labs(title = "Clay brick production in Australia, mln")
?pelt
pelt |>
autoplot(Lynx) + labs(title = "Lynx trappings for 1821–1934 in Canada")
?gafa_stock
gafa_stock  |>
autoplot(Close) + labs(title = "GAFA close stock prices from 2014-2018")
gafa_stock %>%
ggplot(aes(x=Date, y=Close, group=Symbol)) +
geom_line(aes(col=Symbol)) +
# facet_grid(Symbol ~ ., scales='free') +
labs(title = "GAFA close stock prices from 2014-2018")
?vic_elec
vic_elec%>%
head(500)|>
autoplot(Demand/1e3) +
labs(
x = "Date",
y = "Demand (GW)",
title = "Half-hourly electricity demand",
subtitle = "Victoria, Australia"
)
# Look at the data over a shorter period
vic_elec[350:1900, ] |>
autoplot(Demand/1e3) +
labs(
x = "Date",
y = "Demand (GW)",
title = "Half-hourly electricity demand",
subtitle = "Victoria, Australia"
)
# Bricks (from aus_production)
aus_production %>%
select(Bricks) %>%
autoplot() +
labs(title = "Australian Clay Brick Production",
y = "Millions of bricks", x = "Year") +
theme_minimal()
# Lynx (from pelt)
pelt %>%
autoplot(Lynx) +
labs(title = "Annual Canadian Lynx Trappings",
y = "Number of pelts", x = "Year") +
theme_minimal()
# Bricks (from aus_production)
aus_production %>%
select(Bricks) %>%
autoplot() +
labs(title = "Australian Clay Brick Production",
y = "Millions of bricks", x = "Year") +
theme_minimal()
# Lynx (from pelt)
pelt %>%
autoplot(Lynx) +
labs(title = "Annual Canadian Lynx Trappings",
y = "Number of pelts", x = "Year") +
theme_minimal()
# Close (from gafa_stock)
gafa_stock %>%
autoplot(Close, colour = Company) +
labs(title = "Daily Closing Prices of GAFA Stocks",
y = "Price (USD)", x = "Date") +
theme_minimal()
gafa_stock
# Close (from gafa_stock)
gafa_stock %>%
autoplot(Close, colour = Symbol) +
labs(title = "Daily Closing Prices of GAFA Stocks",
y = "Price (USD)", x = "Date") +
theme_minimal()
# Close (from gafa_stock)
gafa_stock %>%
autoplot(Close, colour = Symbol) +
labs(title = "Daily Closing Prices of GAFA Stocks",
y = "Price (USD)", x = "Date") +
theme_minimal()
# Close (from gafa_stock)
gafa_stock %>%
autoplot(Close, colour = Company) +
labs(title = "Daily Closing Prices of GAFA Stocks",
y = "Price (USD)", x = "Date") +
theme_minimal()
gafa_stock
# Close (from gafa_stock)
gafa_stock %>%
autoplot(Close) +
labs(title = "Daily Closing Prices of GAFA Stocks",
y = "Price (USD)", x = "Date") +
theme_minimal()
# Demand (from vic_elec)
vic_elec %>%
autoplot(Demand) +
labs(title = "Electricity Demand in Victoria",
y = "Megawatts", x = "Date") +
theme_minimal()
